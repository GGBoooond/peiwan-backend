package com.peiwan.config;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

/**
 * Spring SecurityÈÖçÁΩÆÁ±ª
 * 
 * @author peiwan
 * @since 2024-01-01
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(AbstractHttpConfigurer::disable)  // Á¶ÅÁî®CSRF‰øùÊä§
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))  // ÈÖçÁΩÆCORS
            .authorizeHttpRequests(authz -> authz
                // üö® ÊµãËØïÈò∂ÊÆµÔºöÊîæÂºÄÊâÄÊúâÊé•Âè£ÊùÉÈôê
                .anyRequest().permitAll()
                
                // üîí Áîü‰∫ßÁéØÂ¢ÉÊùÉÈôêÈÖçÁΩÆÔºàÊ≥®ÈáäÊéâÔºåÊµãËØïÂÆåÊàêÂêéÂêØÁî®Ôºâ
                /*
                // ÂÖ¨ÂºÄÊé•Âè£ÔºàÊó†ÈúÄËÆ§ËØÅÔºâ
                .requestMatchers("/auth/login", "/auth/register", "/auth/check-username/**").permitAll()
                .requestMatchers("/doc.html", "/webjars/**", "/v3/api-docs/**", "/swagger-resources/**").permitAll()
                .requestMatchers("/druid/**").permitAll()
                .requestMatchers("/upload/**").permitAll()  // Êñá‰ª∂‰∏ä‰º†Êé•Âè£
                
                // ÁÆ°ÁêÜÂëòÊé•Âè£ÔºàÈúÄË¶ÅADMINËßíËâ≤Ôºâ
                .requestMatchers("/admin/**").hasRole("ADMIN")
                
                // ÂÆ¢ÊúçÊé•Âè£ÔºàÈúÄË¶ÅCSËßíËâ≤Ôºâ
                .requestMatchers("/cs/**").hasRole("CS")
                
                // ÂëòÂ∑•Êé•Âè£ÔºàÈúÄË¶ÅEMPLOYEEËßíËâ≤Ôºâ
                .requestMatchers("/employee/**").hasRole("EMPLOYEE")
                
                // ÂÖ∂‰ªñÊé•Âè£ÈúÄË¶ÅËÆ§ËØÅ
                .anyRequest().authenticated()
                */
            )
            .formLogin(AbstractHttpConfigurer::disable)  // Á¶ÅÁî®Ë°®ÂçïÁôªÂΩï
            .logout(logout -> logout
                .logoutUrl("/auth/logout")
                .logoutSuccessUrl("/auth/login")
                .permitAll()
            );

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOriginPatterns(Arrays.asList("*"));  // ÂÖÅËÆ∏ÊâÄÊúâÊù•Ê∫ê
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("*"));
        configuration.setAllowCredentials(true);
        configuration.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

